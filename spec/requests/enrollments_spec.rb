require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/enrollments", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Enrollment. As you add validations to Enrollment, be sure to
  # adjust the attributes here as well.
  let(:author){create(:user, user_type: 'author')}
  let(:talent){create(:user, user_type: 'talent')}
  let(:course){create(:course, user_id: author.id)}
  let(:valid_attributes) {
   {
    "data":{
        "type":"enrollments",
        "attributes":{
            "user-id": talent.id,
            "course-id": course.id
        }
     }
   } 
  }

  let(:invalid_attributes) {
    {"user-id": "4", "course-id": "5"}
  }

  let(:create_enrollment){
    {user_id: talent.id, course_id: course.id}
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # EnrollmentsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {Accept: "application/vnd.api+json", "Content-Type"=>"application/vnd.api+json"}
  }

  describe "GET /index" do
    it "renders a successful response" do
      Enrollment.create! create_enrollment
      get enrollments_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      enrollment = Enrollment.create! create_enrollment
      get enrollment_url(enrollment), headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Enrollment" do
        expect {
          post enrollments_url,
               params: valid_attributes , headers: valid_headers, as: :json
        }.to change(Enrollment, :count).by(1)
      end

      it "renders a JSON response with the new enrollment" do
        post enrollments_url,
             params: valid_attributes , headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/vnd.api+json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Enrollment" do
        expect {
          post enrollments_url,
               params: invalid_attributes ,headers: valid_headers , as: :json
        }.to change(Enrollment, :count).by(0)
      end

      it "renders a JSON response with errors for the new enrollment" do
        post enrollments_url,
             params: invalid_attributes , headers: valid_headers, as: :json
        expect(response.status).to eq(400)
        expect(response.content_type).to eq("application/vnd.api+json")
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:author){create(:user, user_type: 'author')}
      let(:talent){create(:user, user_type: 'talent')}
      let(:talent1){create(:user, user_type: 'talent')}
      let(:course){create(:course, user_id: author.id)}    
      let(:enrollment){
        Enrollment.create ({user_id: talent.id, course_id: course.id})
      }
      let(:new_attributes) {
           {
            "data":{
                "id": enrollment.id,
                "type": "enrollments",
                "attributes":{
                    "user-id": talent1.id,
                    "course-id": course.id
                }
             }
           } 
      }

      it "updates the requested enrollment" do
        patch enrollment_url(enrollment),
              params: new_attributes, headers: valid_headers, as: :json
        enrollment.reload
        skip("Add assertions for updated state")
      end

      it "renders a JSON response with the enrollment" do
        patch enrollment_url(enrollment),
              params: new_attributes , headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/vnd.api+json"))
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the enrollment" do
        enrollment = Enrollment.create(create_enrollment)
        patch enrollment_url(enrollment),
              params: invalid_attributes , headers: valid_headers, as: :json
        expect(response.status).to eq(400)
        expect(response.content_type).to eq("application/vnd.api+json")
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested enrollment" do
      enrollment = Enrollment.create(create_enrollment)
      expect {
        delete enrollment_url(enrollment), headers: valid_headers, as: :json
      }.to change(Enrollment, :count).by(-1)
    end
  end
end
