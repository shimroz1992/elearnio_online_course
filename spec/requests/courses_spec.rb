require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/courses", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Course. As you add validations to Course, be sure to
  # adjust the attributes here as well.
  let(:user){
    create(:user)
  }
  let(:valid_attributes) {
    {
      "data":{
          "type": "courses",
          "relationships":{
              "author":{
                  "data":{
                      "type": "users",
                      "id": user.id
                  }
              }
          },
          "attributes":{
              "title": "course name",
              "description": "test description"
          }
      }
    }
  }

  let(:create_course){
    {title: 'test', description: 'hello', user_id: user.id}
  }

  let(:invalid_attributes) {
    {title: 'test', description: 'hello'}
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # CoursesController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {Accept: "application/vnd.api+json", "Content-Type"=>"application/vnd.api+json"}
  }

  
  describe "GET /index" do
    it "renders a successful response" do
      Course.create! create_course
      get courses_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      course = Course.create! create_course
      get course_url(course), headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Course" do
        expect {
          post courses_url, params: valid_attributes , headers: valid_headers, as: :json
        }.to change(Course, :count).by(1)
      end

      it "renders a JSON response with the new course" do
        post courses_url,params: valid_attributes, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/vnd.api+json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Course" do
        expect {
          post courses_url,
               params: invalid_attributes, headers: valid_headers, as: :json
        }.to change(Course, :count).by(0)
      end

      it "renders a JSON response with errors for the new course" do
        post courses_url,
             params: invalid_attributes, headers: valid_headers, as: :json
        expect(response.status).to eq(400)
        expect(response.content_type).to eq("application/vnd.api+json")
      end
    end
  end

  describe "PATCH /update" do
    let(:course) { Course.create! create_course }
    context "with valid parameters" do
      let(:new_attributes) {
        {
          "data":{
              "id": course.id,
              "type": "courses",
              "relationships":{
                  "author":{
                      "data":{
                          "type": "users",
                          "id": user.id
                      }
                  }
              },
              "attributes":{
                  "title": "new course name",
                  "description": "new test description"
              }
          }
        }        
      }

      it "updates the requested course" do
        patch course_url(course),
              params: new_attributes , headers: valid_headers, as: :json
        course.reload
        skip("Add assertions for updated state")
      end

      it "renders a JSON response with the course" do
        patch course_url(course),
              params: new_attributes , headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/vnd.api+json"))
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the course" do
        course = Course.create! create_course
        patch course_url(course),
              params: invalid_attributes , headers: valid_headers, as: :json
        expect(response.status).to eq(400)
        expect(response.content_type).to eq("application/vnd.api+json")
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested course" do
      course = Course.create! create_course
      expect {
        delete course_url(course), headers: valid_headers, as: :json
      }.to change(Course, :count).by(-1)
    end
  end
end
